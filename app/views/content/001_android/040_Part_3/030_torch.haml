%h1 Activating the Torch

%p Now we've got our torch activity set up, let's actually make it work. This is a little off spec, so I'm just going to give you the source code for the torch activity:

:ruby
  code = <<-CODE
    package ly.trivial.adventure;

    import android.app.Activity;
    import android.content.Context;
    import android.content.pm.PackageManager;
    import android.hardware.Camera;
    import android.hardware.Camera.Parameters;
    import android.os.Bundle;
    import android.util.Log;

    public class TorchActivity extends Activity {

      private Camera camera;
      private Parameters cameraParams;
      private PackageManager pm;

      /* Called when the activity is first created. */
      @Override
      public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.torch_layout);
        Context context = this;
        pm = context.getPackageManager();
      }

      /* Called when the activity comes to the foreground. */
      @Override
      protected void onResume() {
        // Does the device have a camera
        if (!pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
          Log.e("err", "There is no flash");
        } else {
          // Get the camera and its parameters
          camera = Camera.open();
          cameraParams = camera.getParameters();
          cameraParams.setFlashMode(Parameters.FLASH_MODE_TORCH);
          cameraParams.setFocusMode(Parameters.FOCUS_MODE_INFINITY);
          camera.setParameters(cameraParams);
          camera.startPreview();
        }
        super.onResume();
      }

      /** Called when the activity moves to the background. */
      @Override
      protected void onPause() {
        cameraParams.setFlashMode(Parameters.FLASH_MODE_OFF);
        camera.setParameters(cameraParams);
        camera.stopPreview();
        if (camera != null) {
          camera.release();
        }
        super.onPause();
      }

    }
  CODE

=format_code(code)

%p We also need to request the camera permission in our manifest like so:

:ruby
  code = <<-CODE
    <?xml version="1.0" encoding="utf-8"?>
    <manifest package="ly.trivial.adventure"
        android:versionCode="1"
        android:versionName="1.0" xmlns:android="http://schemas.android.com/apk/res/android">

        <uses-sdk android:minSdkVersion="10" />

        <uses-permission android:name="android.permission.CAMERA" />
        <uses-feature android:name="android.hardware.camera" />

        <application
            android:icon="@drawable/ic_launcher"
            android:label="@string/app_name" >
            <activity
                android:name=".ChooserActivity"
                android:label="@string/app_name" >
                <intent-filter>
                    <action android:name="android.intent.action.MAIN" />
                    <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
            </activity>
            <activity android:name="TorchActivity"></activity>
        </application>

    </manifest>
  CODE

=format_code(code)



%h2 Extra Exercise

%p Catch the case when the device has no camera. Instead of logging an error, display a white screen so the user can use that to get some light. You'll need to create another layout file, then set a different content view.